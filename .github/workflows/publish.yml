name: Publish

on:
  workflow_dispatch:
    inputs:
      version:
        description: '要发布的版本号'
        required: true
        default: |
          0.0.0
        type: string
      changelog:
        description: '更新日志（子插件壹：更新内容|子插件贰：更新内容）'
        required: true
        type: string

jobs:
  publish:
    runs-on: ubuntu-latest
    environment:
      name: Publish
      url: ${{ github.server_url }}/${{ github.repository }}/releases/tag/v${{ github.event.inputs.version }}

    steps:
      - name: Checkout full repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install pip dependencies
        run: |
          pip3 install semver luadata

      - name: Install apt dependencies
        run: |
          sudo rm -f /var/lib/man-db/auto-update
          sudo apt install --no-install-recommends lua5.1 p7zip-full

      - name: Set up Git user
        run: |
          # 默认使用 bot 身份进行常规操作
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          echo "::notice::Using github-actions bot identity for regular operations"

      - name: Switch and hard reset to master
        run: |
          git fetch origin
          git checkout master
          git reset --hard origin/master

      - name: Check version
        run: |
          VERSION="${{ github.event.inputs.version }}"
          CURRENT_VERSION=$(grep "_VERSION_.*'.*'" Boilerplate_!Base/src/lib/Base.lua | sed -E "s/.*'(.*)'.*/\1/")
          python3 -c "
          import semver
          try:
            if not semver.compare('$VERSION', '$CURRENT_VERSION') > 0:
              print('::error::New version $VERSION must be greater than current version $CURRENT_VERSION')
              exit(1)
          except ValueError as e:
            print('::error::Invalid version format. Both versions must be in format X.Y.Z')
            exit(1)
          "

      - name: Update Base.lua version and build
        run: |
          DATE=$(date +%Y%m%d)
          VERSION="${{ github.event.inputs.version }}"
          sed -i "s/\(local _BUILD_\)\( *\)\(=\) *'[^']*'/\1\2\3 '${DATE}'/" Boilerplate_!Base/src/lib/Base.lua
          sed -i "s/\(local _VERSION_\)\( *\)\(=\) *'[^']*'/\1\2\3 '${VERSION}'/" Boilerplate_!Base/src/lib/Base.lua

      - name: Update CHANGELOG.md
        run: |
          VERSION="${{ github.event.inputs.version }}"
          CHANGELOG="${{ github.event.inputs.changelog }}"
          TMPFILE=$(mktemp)
          echo "# 更新日志" > $TMPFILE
          echo "" >> $TMPFILE
          echo "## Boilerplate插件集 v${VERSION}" >> $TMPFILE
          echo "" >> $TMPFILE
          echo "$CHANGELOG" | tr '|' '\n' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//' | sed 's/^["""]//g' | sed 's/["""]$//g' | sed 's/[：:]/] /g' | sed 's/^/* [/g' >> $TMPFILE
          echo "" >> $TMPFILE
          tail -n +3 CHANGELOG.md >> $TMPFILE
          mv $TMPFILE CHANGELOG.md

      - name: Write secret to file
        run: |
          cat > secret.jx3dat << 'EOF'
          ${{ secrets.SECRET_JX3DAT }}
          EOF

      - name: Commit release changes
        run: |
          VERSION="${{ github.event.inputs.version }}"
          git add -A
          git commit -m "release: ${VERSION}" || echo "No changes to commit"

      - name: Run Build Command
        run: |
          python3 \!src-dist/ci.py

      - name: Push commits
        run: |
          git push -f origin master:stable

      - name: Create release branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ github.event.inputs.version }}"
          BRANCH="release/v${VERSION}"
          git checkout -b $BRANCH
          git push -u origin $BRANCH -f
          # gh pr create \
          #   --title "release: v${VERSION}" \
          #   --body "Automated release PR for version ${VERSION}" \
          #   --base master \
          #   --head $BRANCH || echo "PR already exists or failed to create, continuing..."

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.PAT_TOKEN }}
          title: "release: v${{ github.event.inputs.version }}"
          body: "Automated release PR for version ${{ github.event.inputs.version }}"
          branch: "release/v${{ github.event.inputs.version }}"

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-archives-${{ github.run_number }}-${{ github.sha }}
          path: '\!src-dist/dist/*.7z'

      - name: Trigger Lint Workflow
        run: |
          VERSION="${{ github.event.inputs.version }}"
          BRANCH="release/v${VERSION}"
          if [[ "${{ secrets.PAT_TOKEN }}" != "" ]]; then
            echo "::notice::PAT_TOKEN found. Creating trigger commit with user identity."

            # 获取用户信息
            USER_INFO=$(curl -s -H "Authorization: token ${{ secrets.PAT_TOKEN }}" https://api.github.com/user)
            USER_NAME=$(echo $USER_INFO | jq -r .name)
            USER_EMAIL=$(echo $USER_INFO | jq -r .email)

            # 如果 name 为 null，使用 login
            if [[ "$USER_NAME" == "null" ]]; then
              USER_NAME=$(echo $USER_INFO | jq -r .login)
            fi
            # 如果 email 为 null，使用默认格式
            if [[ "$USER_EMAIL" == "null" ]]; then
              USER_LOGIN=$(echo $USER_INFO | jq -r .login)
              USER_EMAIL="${USER_LOGIN}@users.noreply.github.com"
            fi

            # 切换到 release 分支
            git checkout $BRANCH

            # 临时设置用户身份和 remote URL
            git config user.name "$USER_NAME"
            git config user.email "$USER_EMAIL"
            git remote set-url origin "https://tinymins:${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }}.git"

            # 创建触发文件并提交
            echo "# Trigger lint for release v${VERSION} - $(date)" > .lint-trigger
            git add .lint-trigger
            git commit -m "trigger: lint workflow for v${VERSION}"
            git push origin $BRANCH
            git -c credential.helper= push https://tinymins:${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }}.git

            echo "::notice::Trigger commit pushed by: $USER_NAME <$USER_EMAIL>"
          else
            echo "::warning::No PAT_TOKEN found. Lint workflow may not be triggered automatically."
            echo "::notice::Please set up PAT_TOKEN secret for automatic lint triggering."
            echo "::notice::You can manually trigger lint workflow if needed."
          fi
